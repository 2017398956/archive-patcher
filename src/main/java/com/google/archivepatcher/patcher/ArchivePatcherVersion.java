// Copyright 2015 Google Inc. All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.archivepatcher.patcher;


/**
 * Enumeration of versions of Archive Patcher, for maintaining backwards
 * compatibility.
 */
public enum ArchivePatcherVersion {
    /**
     * Initial release.
     */
    V1(1),

    /**
     * Adds uint32 "compression engine ID" to both PATCH and NEW directives.
     * Backwards compatibility notes: Assume no compression for V1 patches.
     */
    V2(2);

    /**
     * The integer value of the version.
     */
    public final int asInteger;

    /**
     * The string value of the version, as two digits.
     */
    public final String asTwoDigitString;

    /**
     * Private constructor.
     * @param intValue the value for the version
     */
    private ArchivePatcherVersion(int intValue) {
        asInteger = intValue;
        asTwoDigitString = intValue < 10 ? "0" + intValue : "" + intValue;
    }

    /**
     * Returns the version corresponding to the specified integer value.
     * @param value the integer value to look up
     * @return the version
     */
    public final static ArchivePatcherVersion fromInt(int value) {
        if (value <= 0) {
            throw new IllegalArgumentException("version cannot be <= 0");
        }
        if (value > 99) {
            throw new IllegalArgumentException("version cannot be > 99");
        }
        switch(value) {
            case 1: return V1;
            case 2: return V2;
        }
        throw new IllegalArgumentException("Unsupported version: " + value);
    }

    /**
     * Parse the version from a string.
     * @param text the string to parse
     * @return the version
     */
    public final static ArchivePatcherVersion parse(String text) {
        return fromInt(Integer.parseInt(text));
    }

    /**
     * Returns the current version of the patch format generated by and
     * supported by this library. Patches whose version number is less than or
     * equal to this value are guaranteed to be supported; patches whose version
     * number is greater than this value <em>may</em> not be supported.
     * @return the current version
     */
    public final static ArchivePatcherVersion buildVersion() {
        return V2;
    }
}